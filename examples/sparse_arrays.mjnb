{"fileName":"sparse_arrays.mjnb","cells":[{"cellType":"MARKDOWN","id":"efa42fc6b5754f1eb205496ca8c644b9","cellContent":"# Sparse Arrays Solution\nClick the link icon at the top right to view problem prompt"},{"cellType":"MARKDOWN","id":"df29c7afb9174cceb4d829a3394bf840","cellContent":"### Solution 1 (Quadratic time)\nThis solution uses no extra space but takes n*m time to complete. We compare every item b_i in b with \nevery item a_j in a and increment result_i if the two are equal."},{"cellType":"CODE","id":"3ebccc0a9dc7422a8e51d2c03013ac92","cellContent":"int[] sparseArraysQuadratic(String[] a, String[] b) {\n  int[] result = new int[b.length];\n  \n  for (int i = 0; i < b.length; i++) {\n   \tfor (int j = 0; j < a.length; j++) {\n      if (b[i].equals(a[j])) {\n        result[i]++;\n      }\n    }\n  }\n  \n  return result;\n}"},{"cellType":"MARKDOWN","id":"2307f03ea3294498b83c01cbd6637ace","cellContent":"#### Analysis\n* Time complexity: O(n*m), where n is the length of array a and m is the length of array b\n* Space complexity: O(1)"},{"cellType":"MARKDOWN","id":"43208c646a3e402f93f01ac1a6837bb0","cellContent":"### Solution 2 (Linear time)\nIn this solution we store the number of occurences of String a_i in array a. We then iterate through \nb once to find the frequency of b_i found in a. The ternary operator assigns the number of \noccurences to result_i"},{"cellType":"CODE","id":"0b23485e662b411cbd55fc3115b22691","cellContent":"int[] sparseArraysLinear(String[] a, String[] b) {\n  HashMap<String, Integer> occurences = new HashMap<>();\n  for (int i = 0; i < a.length; i++) {\n    if (!occurences.containsKey(a[i])) {\n      occurences.put(a[i], 1);\n    } else {\n      occurences.put(a[i], occurences.get(a[i])+1);\n    }\n  }\n  \n  int[] result = new int[b.length];\n  for (int i = 0; i < result.length; i++) {\n    result[i] = (occurences.containsKey(b[i]))\n      ? occurences.get(b[i])\n      : 0;\n  }\n  \n  return result;\n}"},{"cellType":"MARKDOWN","id":"6958d54752f84305b2f095cff09c0ade","cellContent":"#### Analysis\n* Time complexity: O(n+m) where n is the length of array a and m is the length of array b\n* Space complexity: O(n) where n is the length of array a"},{"cellType":"CODE","id":"4e7fc029fa2d48cfb370ec5bf1dd18c2","cellContent":"int[] sparseArrays(String[] a, String[] b) {\n  return sparseArraysQuadratic(a, b);\n  \/\/ sparseArraysLinear(a, b);\n}"},{"cellType":"MARKDOWN","id":"2ec7b9d491f148d1adea995e3ea91bc8","cellContent":"##### Example input\n```\n[\"aba\", \"baba\", \"aba\", \"xyz\"]\n[\"xyz\", \"aba\", \"abc\"]\n```\n##### Example output\n```\n[1, 2, 0]\n```"}],"problemSourceURL":"https:\/\/www.hackerrank.com\/challenges\/sparse-arrays\/problem","displayName":"Sparse Arrays","mainFunctionSignature":"sparseArrays","timeCreated":1512158610836,"lastModified":1512158610836,"returnType":"int[]","tags":["arrays","hackerrank"]}